[
   {
      "name": "add",
      "desc": "Add two values together",
      "inputs": 2,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 100
   },
   {
      "name": "subtract",
      "desc": "Subtract two values",
      "inputs": 2,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 101
   },
   {
      "name": "multiply",
      "desc": "Multiply two values together",
      "inputs": 2,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 102
   },
   {
      "name": "quotient",
      "desc": "Divide two values",
      "inputs": 2,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 103
   },
   {
      "name": "increment",
      "desc": "Add one to a value",
      "inputs": 1,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 104
   },
   {
      "name": "decrement",
      "desc": "Decrement a value by 1",
      "inputs": 1,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 105
   },
   {
      "name": "product",
      "desc": "multiply two decimal numbers",
      "inputs": 2,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 106
   },
   {
      "name": "remainder",
      "desc": "Divide two decimal numbers",
      "inputs": 2,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 107
   },
   {
      "name": "concatenatep",
      "desc": "Merge two strings to create a new one",
      "inputs": 2,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 108
   },
   {
      "name": "concatenat",
      "desc": "Add a string to end of a string",
      "inputs": 2,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 109
   },
   {
      "name": "construct",
      "desc": "Add a var into a string",
      "inputs": 2,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 110
   },
   {
      "name": "length",
      "desc": "Find the length of a string",
      "inputs": 2,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 111
   },
   {
      "name": "first",
      "desc": "Use bracket notation to find the first character in a String",
      "inputs": 2,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 112
   },
   {
      "name": "nth",
      "desc": "Find the nth character in a string",
      "inputs": 2,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 113
   },
   {
      "name": "lastCharacter",
      "desc": "Find the last character in a String",
      "inputs": 1,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 114
   },
   {
      "name": "findNthToLast",
      "desc": "Find the nth to last character in a string",
      "inputs": 2,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 115
   },
   {
      "name": "push",
      "desc": "Manipulate arrays with .push()",
      "inputs": 2,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 116
   },
   {
      "name": "pop",
      "desc": "Remove last item an array with .pop()",
      "inputs": 1,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 117
   },
   {
      "name": "shift",
      "desc": "Remove first item in an array with .shift()",
      "inputs": 1,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 118
   },
   {
      "name": "unshift",
      "desc": "Manipulate arrays with .unshift()",
      "inputs": 2,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 119
   },
   {
      "name": "standInLine",
      "desc": "Add number to end of array,remove first element and show that removed element in return",
      "inputs": 2,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 120
   },
   {
      "name": "countingCards",
      "desc": "uses a switch statement to check count cards",
      "inputs": 1,
      "type": "intermediate",
      "typeNum": 200,
      "isFavorite": false,
      "order": 200
   },
   {
      "name": "lookUpProfile",
      "desc": "Array of different people in our contacts list",
      "inputs": 2,
      "type": "intermediate",
      "typeNum": 200,
      "isFavorite": false,
      "order": 201
   },
   {
      "name": "generateRanNumRange",
      "desc": "generate random whole numbers within a range",
      "inputs": 2,
      "type": "intermediate",
      "typeNum": 200,
      "isFavorite": false,
      "order": 202
   },
   {
      "name": "splice",
      "desc": "use .splice() to remove items",
      "inputs": 2,
      "type": "intermediate",
      "typeNum": 200,
      "isFavorite": false,
      "order": 203
   },
   {
      "name": "spliceAdd",
      "desc": "use .splice() to add items",
      "inputs": 3,
      "type": "intermediate",
      "typeNum": 200,
      "isFavorite": false,
      "order": 204
   },
   {
      "name": "checkPresEleIndex",
      "desc": "check for the presense of an element with indexof()",
      "inputs": 2,
      "type": "intermediate",
      "typeNum": 200,
      "isFavorite": false,
      "order": 205
   },
   {
      "name": "checkTypeOfVar",
      "desc": "check the type of variable with typeof",
      "inputs": 1,
      "type": "intermediate",
      "typeNum": 200,
      "isFavorite": false,
      "order": 206
   },
   {
      "name": "returnPartArrSlice",
      "desc": "Return part of an array using slice method",
      "inputs": 2,
      "type": "Functional",
      "typeNum": 300,
      "isFavorite": false,
      "order": 300
   },
   {
      "name": "removeElemSlice",
      "desc": "Remove part of an array using slice method",
      "inputs": 2,
      "type": "Functional",
      "typeNum": 300,
      "isFavorite": false,
      "order": 301
   },
   {
      "name": "concatArr",
      "desc": "Combine Two Arrays using concat Method",
      "inputs": 2,
      "type": "Functional",
      "typeNum": 300,
      "isFavorite": false,
      "order": 302
   },
   {
      "name": "concatToEndArray",
      "desc": "Add Elements to end of Array using concat",
      "inputs": 2,
      "type": "Functional",
      "typeNum": 300,
      "isFavorite": false,
      "order": 303
   },
   {
      "name": "reduceMethAnaData",
      "desc": "Use the reduce Method to Analyze Data",
      "inputs": 1,
      "type": "Functional",
      "typeNum": 300,
      "isFavorite": false,
      "order": 304
   },
   {
      "name": "useHigherOrderFun",
      "desc": "Use higher order functions map,filter, or reduce to solve complex problem",
      "inputs": 1,
      "type": "Functional",
      "typeNum": 300,
      "isFavorite": false,
      "order": 305
   },
   {
      "name": "SortArrAlpha",
      "desc": "Sort an array alphabetically using sort method",
      "inputs": 1,
      "type": "Functional",
      "typeNum": 300,
      "isFavorite": false,
      "order": 306
   },
   {
      "name": "SpltStrArr",
      "desc": "Split a string into an Array using split method.",
      "inputs": 1,
      "type": "Functional",
      "typeNum": 300,
      "isFavorite": false,
      "order": 307
   },
   {
      "name": "sentisify",
      "desc": "Join the elements of an array to create a string using join method.",
      "inputs": 1,
      "type": "Functional",
      "typeNum": 300,
      "isFavorite": false,
      "order": 308
   },
   {
      "name": "convStrUrlSlug",
      "desc": "Apply Functional Programming to Convert Strings to URL Slugs",
      "inputs": 1,
      "type": "Functional",
      "typeNum": 300,
      "isFavorite": false,
      "order": 309
   },
   {
      "name": "everyMethCheckPos",
      "desc": "Use the every method to check every element in array meets criteria",
      "inputs": 1,
      "type": "Functional",
      "typeNum": 300,
      "isFavorite": false,
      "order": 310
   },
   {
      "name": "someMethCheckNeg",
      "desc": "Use the some method to check if any element in array meets criteria",
      "inputs": 1,
      "type": "Functional",
      "typeNum": 300,
      "isFavorite": false,
      "order": 311
   },
   {
      "name": "convertCelsToF",
      "desc": "Converts celsius to Fahrenheit",
      "inputs": 1,
      "type": "Algorithms",
      "typeNum": 400,
      "isFavorite": false,
      "order": 400
   },
   {
      "name": "reverseStr",
      "desc": "Reverse a string",
      "inputs": 1,
      "type": "Algorithms",
      "typeNum": 400,
      "isFavorite": false,
      "order": 401
   },
   {
      "name": "factorialize",
      "desc": "factoralize a number",
      "inputs": 1,
      "type": "Algorithms",
      "typeNum": 400,
      "isFavorite": false,
      "order": 402
   },
   {
      "name": "findLongWordStr",
      "desc": "Find the longest word in a string",
      "inputs": 1,
      "type": "Algorithms",
      "typeNum": 400,
      "isFavorite": false,
      "order": 403
   },
   {
      "name": "largestOfFour",
      "desc": "Return an array of the largest numbers in an array",
      "inputs": 1,
      "type": "Algorithms",
      "typeNum": 400,
      "isFavorite": false,
      "order": 404
   },
   {
      "name": "confirmEnding",
      "desc": "Check if a string ends with the given target",
      "inputs": 2,
      "type": "Algorithms",
      "typeNum": 400,
      "isFavorite": false,
      "order": 405
   },
   {
      "name": "repeatStringNumTimes",
      "desc": "Repeat a string",
      "inputs": 2,
      "type": "Algorithms",
      "typeNum": 400,
      "isFavorite": false,
      "order": 406
   },
   {
      "name": "truncateString",
      "desc": "Truncate a string",
      "inputs": 2,
      "type": "Algorithms",
      "typeNum": 400,
      "isFavorite": false,
      "order": 407
   },
   {
      "name": "findElement",
      "desc": "Find an element in array",
      "inputs": 2,
      "type": "Algorithms",
      "typeNum": 400,
      "isFavorite": false,
      "order": 408
   },
   {
      "name": "booWho",
      "desc": "Check if value is classified as boolean primitive",
      "inputs": 1,
      "type": "Algorithms",
      "typeNum": 400,
      "isFavorite": false,
      "order": 409
   },
   {
      "name": "titleCase",
      "desc": "Title Case a Sentence",
      "inputs": 1,
      "type": "Algorithms",
      "typeNum": 400,
      "isFavorite": false,
      "order": 410
   },
   {
      "name": "frankensplice",
      "desc": "Slice and splice an array",
      "inputs": 3,
      "type": "Algorithms",
      "typeNum": 400,
      "isFavorite": false,
      "order": 411
   },
   {
      "name": "bouncer",
      "desc": "Remove all falsy values",
      "inputs": 1,
      "type": "Algorithms",
      "typeNum": 400,
      "isFavorite": false,
      "order": 412
   },
   {
      "name": "getIndexToIns",
      "desc": "Return lowest index that",
      "inputs": 2,
      "type": "Algorithms",
      "typeNum": 400,
      "isFavorite": false,
      "order": 413
   },
   {
      "name": "mutation",
      "desc": "Mutations",
      "inputs": 1,
      "type": "Algorithms",
      "typeNum": 400,
      "isFavorite": false,
      "order": 414
   },
   {
      "name": "chunkArrayInGroups",
      "desc": "split array in groups and return two dimensional array",
      "inputs": 2,
      "type": "Algorithms",
      "typeNum": 400,
      "isFavorite": false,
      "order": 415
   }
]
